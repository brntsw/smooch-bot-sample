'use strict';

exports.__esModule = true;
exports.Smooch = undefined;

var _smooch = require('./smooch');

var _webhooks = require('./api/webhooks');

var _menu = require('./api/menu');

var _jwt = require('./utils/jwt');

var jwt = _interopRequireWildcard(_jwt);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Smooch = exports.Smooch = function (_SmoochBase) {
    _inherits(Smooch, _SmoochBase);

    function Smooch() {
        var auth = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, Smooch);

        if (auth.keyId || auth.secret) {
            if (!auth.scope) {
                throw new Error('Invalid auth: missing scope.');
            }

            if (!auth.keyId) {
                throw new Error('Invalid auth: missing keyId.');
            }

            if (!auth.secret) {
                throw new Error('Invalid auth: missing secret.');
            }
        }

        if (auth.keyId && auth.secret && auth.scope) {
            var jwtBody = {
                scope: auth.scope
            };

            if (auth.userId) {
                jwtBody.userId = auth.userId;
            }

            auth = {
                jwt: jwt.generate(jwtBody, auth.secret, auth.keyId)
            };
        }

        var _this = _possibleConstructorReturn(this, _SmoochBase.call(this, auth, options));

        _this.webhooks = new _webhooks.WebhooksApi(_this.serviceUrl, _this.authHeaders, _this.headers);
        _this.menu = new _menu.MenuApi(_this.serviceUrl, _this.authHeaders, _this.headers);

        Object.assign(_this.utils, {
            jwt: jwt
        });
        return _this;
    }

    return Smooch;
}(_smooch.Smooch);