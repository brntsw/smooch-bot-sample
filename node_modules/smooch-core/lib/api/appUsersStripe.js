'use strict';

exports.__esModule = true;
exports.AppUsersStripeApi = undefined;

var _base = require('./base');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class AppUsersStripeApi
 * @extends BaseApi
 */

var AppUsersStripeApi = exports.AppUsersStripeApi = function (_BaseApi) {
    _inherits(AppUsersStripeApi, _BaseApi);

    function AppUsersStripeApi() {
        _classCallCheck(this, AppUsersStripeApi);

        return _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));
    }

    AppUsersStripeApi.prototype.updateCustomer = function updateCustomer(userId, token) {
        if (!token) {
            return Promise.reject(new Error('Must provide a Stripe token.'));
        }

        var url = this.getFullURL('appUsers', userId, 'stripe', 'customer');
        return this.request('POST', url, {
            token: token
        }, {
            allowedAuth: ['jwt']
        });
    };

    AppUsersStripeApi.prototype.createTransaction = function createTransaction(userId, actionId, token) {
        if (!actionId) {
            return Promise.reject(new Error('Must provide an action id.'));
        }

        var url = this.getFullURL('appUsers', userId, 'stripe', 'transaction');

        var body = {
            actionId: actionId
        };

        if (token) {
            Object.assign(body, {
                token: token
            });
        }

        return this.request('POST', url, body);
    };

    return AppUsersStripeApi;
}(_base.BaseApi);