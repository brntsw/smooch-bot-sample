'use strict';

exports.__esModule = true;
exports.ConversationsApi = undefined;

var _base = require('./base');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @typedef Message
 *
 */

/**
 * @class ConversationsApi
 * @extends BaseApi
 */

var ConversationsApi = exports.ConversationsApi = function (_BaseApi) {
    _inherits(ConversationsApi, _BaseApi);

    function ConversationsApi() {
        _classCallCheck(this, ConversationsApi);

        return _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));
    }

    /**
     * Fetch an app user's conversation
     * @param  {string} userId - a user id
     * @return {APIResponse}
     */

    ConversationsApi.prototype.get = function get(userId) {
        var url = this.getFullURL('appUsers', userId, 'conversation');
        return this.request('GET', url);
    };

    /**
     * Post back to an action button
     * @param  {string} userId - a user id
     * @param  {string} actionId - an action id
     * @return {APIResponse}
     */


    ConversationsApi.prototype.postPostback = function postPostback(userId, actionId) {
        if (!actionId) {
            return Promise.reject(new Error('Must provide an action id.'));
        }

        var url = this.getFullURL('appUsers', userId, 'conversation', 'postback');
        var body = {
            actionId: actionId
        };

        return this.request('POST', url, body);
    };

    /**
     * Deprecated. Use appUsers.sendMessage() instead.
     */


    ConversationsApi.prototype.sendMessage = function sendMessage() {
        return Promise.reject(new Error('This endpoint is deprecated. Please use appUsers.sendMessage() instead.'));
    };

    /**
     * Deprecated. Use appusers.uploadImage() instead.
     */


    ConversationsApi.prototype.uploadImage = function uploadImage() {
        return Promise.reject(new Error('This endpoint is deprecated. Please use appUsers.uploadImage() instead.'));
    };

    /**
     * Reset the unread count of the conversation
     * @return {APIResponse}
     */


    ConversationsApi.prototype.resetUnreadCount = function resetUnreadCount(userId) {
        var url = this.getFullURL('appUsers', userId, 'conversation', 'read');
        return this.request('POST', url);
    };

    return ConversationsApi;
}(_base.BaseApi);